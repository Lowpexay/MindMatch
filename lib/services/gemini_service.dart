import 'dart:convert';
import 'dart:typed_data';
import 'package:http/http.dart' as http;
import '../config/api_keys.dart';
import '../models/question_models.dart';
import '../models/mood_data.dart';

class GeminiService {
  static const String _baseUrl = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent';
  final List<String> _keys = ApiKeys.geminiApiKeys;
  int _keyIndex = 0;

  String get _apiKey => _keys[_keyIndex];

  void _advanceKey() {
    if (_keys.isEmpty) return;
    _keyIndex = (_keyIndex + 1) % _keys.length;
  }

  bool _shouldRotateOn(http.Response response) {
    if (response.statusCode == 429 || response.statusCode == 401 || response.statusCode == 403) {
      return true;
    }
    // Heuristic: check common quota/rate messages
    final body = response.body.toLowerCase();
    return body.contains('quota') || body.contains('rate') || body.contains('exceeded') || body.contains('limit');
  }

  Future<http.Response> _postWithRotation(Map<String, dynamic> body) async {
    if (_keys.isEmpty) {
      // Fall back to single attempt with empty key to surface meaningful error
      final uri = Uri.parse('$_baseUrl?key=');
      return http.post(uri, headers: {'Content-Type': 'application/json'}, body: jsonEncode(body));
    }

    int tries = 0;
    http.Response? last;
    while (tries < _keys.length) {
      final uri = Uri.parse('$_baseUrl?key=${_apiKey}');
      final resp = await http.post(uri, headers: {'Content-Type': 'application/json'}, body: jsonEncode(body));
      if (resp.statusCode == 200) return resp;
      last = resp;
      if (_shouldRotateOn(resp)) {
        _advanceKey();
        tries++;
        continue;
      } else {
        return resp;
      }
    }
    return last!;
  }

  Future<List<ReflectiveQuestion>> generateDailyQuestions({
    int count = 5,
    MoodData? userMood,
    String? userId,
  }) async {
    try {
      print('ü§ñ Generating daily questions with Gemini...');
      
      final prompt = _buildQuestionPrompt(count, userMood, userId);
      
      final response = await _postWithRotation({
          'contents': [{
            'parts': [{
              'text': prompt,
            }],
          }],
          'generationConfig': {
            'temperature': 0.8,
            'maxOutputTokens': 1000,
          },
        });

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        final text = data['candidates'][0]['content']['parts'][0]['text'];
        
        print('‚úÖ Gemini response: $text');
  final parsed = _parseQuestionsFromResponse(text);
  print('‚úÖ Parsed ${parsed.length} questions from Gemini response');
  return parsed;
      } else {
        print('‚ùå Gemini API error: ${response.statusCode}');
        print('‚ùå Response body: ${response.body}');
        return _getFallbackQuestions(count: count);
      }
    } catch (e) {
      print('‚ùå Error generating questions: $e');
      return _getFallbackQuestions(count: count);
    }
  }

  /// Transcreve √°udio usando o Gemini (pt-BR)
  /// Suporta `mimeType` como 'audio/webm', 'audio/mpeg', 'audio/wav', etc.
  Future<String> transcribeAudio({
    required Uint8List audioBytes,
    required String mimeType,
  }) async {
    try {
      final requestBody = {
        'contents': [
          {
            'role': 'user',
            'parts': [
              {
                'text': 'Transcreva integralmente em portugu√™s do Brasil o √°udio fornecido. Responda apenas com a transcri√ß√£o, sem coment√°rios.'
              },
              {
                'inlineData': {
                  'mimeType': mimeType,
                  'data': base64Encode(audioBytes),
                }
              }
            ]
          }
        ],
        'generationConfig': {
          'temperature': 0.1,
          'maxOutputTokens': 256,
        },
        'safetySettings': [
          {
            'category': 'HARM_CATEGORY_HARASSMENT',
            'threshold': 'BLOCK_MEDIUM_AND_ABOVE'
          },
          {
            'category': 'HARM_CATEGORY_HATE_SPEECH',
            'threshold': 'BLOCK_MEDIUM_AND_ABOVE'
          },
          {
            'category': 'HARM_CATEGORY_SEXUALLY_EXPLICIT',
            'threshold': 'BLOCK_MEDIUM_AND_ABOVE'
          },
          {
            'category': 'HARM_CATEGORY_DANGEROUS_CONTENT',
            'threshold': 'BLOCK_MEDIUM_AND_ABOVE'
          }
        ],
      };

      final response = await _postWithRotation(requestBody);

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        final candidates = data['candidates'] as List?;
        if (candidates != null && candidates.isNotEmpty) {
          final text = candidates.first['content']?['parts']?[0]?['text']?.toString();
          if (text != null && text.trim().isNotEmpty) {
            return text.trim();
          }
        }
        throw Exception('Resposta vazia do Gemini');
      } else {
        throw Exception('Erro do Gemini: ${response.statusCode} ${response.body}');
      }
    } catch (e) {
      rethrow;
    }
  }

  String _buildQuestionPrompt(int count, MoodData? userMood, String? userId) {
    String moodContext = '';
    if (userMood != null) {
      if (userMood.needsSupport) {
        moodContext = '''
O usu√°rio est√° passando por um momento dif√≠cil (bem-estar baixo: ${userMood.wellnessScore.toInt()}%).
Gere perguntas mais leves e positivas para ajudar a melhorar o humor.
''';
      } else {
        moodContext = '''
O usu√°rio est√° com bom humor (bem-estar: ${userMood.wellnessScore.toInt()}%).
Pode incluir perguntas mais profundas e reflexivas.
''';
      }
    }

    // Adicionar aleatoriedade baseada no usu√°rio e data
    final today = DateTime.now();
    final seed = userId ?? 'default';
    final uniqueContext = '''
Use esta informa√ß√£o para gerar perguntas √∫nicas para hoje:
Data: ${today.day}/${today.month}/${today.year}
Usu√°rio: ${seed.substring(0, (seed.length / 2).round())}
''';

    return '''
Voc√™ √© um gerador de PERGUNTAS FECHADAS (apenas SIM ou N√ÉO) para um app de conex√µes humanas.

$moodContext
$uniqueContext

GERAR: exatamente $count perguntas refletindo valores / prefer√™ncias / vis√£o de mundo.

REGRAS OBRIGAT√ìRIAS (N√ÉO QUEBRAR):
1. Cada pergunta DEVE ser respond√≠vel claramente com apenas "Sim" ou "N√£o".
2. N√ÉO use estruturas abertas (ex.: "Por que", "Como", "Explique", "Descreva", "Qual √©", "O que", "Liste").
3. Pergunta deve terminar com '?'.
4. Evite duplas negativas ou constru√ß√µes confusas.
5. Evite perguntas que pedem justificativa impl√≠cita (ex.: "... e por qu√™?").
6. N√£o use perguntas redundantes ou quase id√™nticas.
7. Portugu√™s simples, direto, sem g√≠rias for√ßadas.
8. Equil√≠brio de temas: filos√≥fico, pessoal, valores, estilo de vida, social, hipot√©tico leve, tecnologia, futuro.
9. N√ÉO gerar conte√∫do sens√≠vel (viol√™ncia expl√≠cita, pol√≠tica partid√°ria, assuntos m√©dicos complexos, sexo expl√≠cito).
10. Cada pergunta deve come√ßar preferencialmente com um destes padr√µes (case-insensitive):
   "Voc√™", "Se ", "√â ", "Est√°", "Tem ", "Pode", "Poderia", "Deveria", "Iria", "Acredita", "Prefere", "Gostaria", "Quer", "J√° ", "Costuma".

ATRIBUTOS JSON:
- question: string (texto da pergunta completa com '?')
- type: um de ["philosophical", "personal", "social", "funny", "hypothetical"] (escolher coerente)
- category: palavra curta min√∫scula (ex: "moral", "lifestyle", "relationships", "technology", "values", "future")

VALIDA√á√ÉO INTERNA (FA√áA ANTES DE RESPONDER):
Para cada pergunta verifique programaticamente:
- Termina com '?' => OK
- N√ÉO cont√©m nenhuma palavra inicial proibida => OK
- N√ÉO cont√©m 'por que', 'porque', 'explique', 'descreva', 'liste', 'como', 'qual', 'quais', 'o que', 'oque' => OK
- Pode ser respondida apenas com sim/n√£o sem pedir justificativa => OK
Se alguma falhar, REESCREVA antes de emitir o JSON final.

SA√çDA:
Retorne SOMENTE um array JSON v√°lido, sem coment√°rios, sem texto extra, sem markdown.
Exemplo de formato (exemplo ilustrativo, n√£o repetir literalmente):
[
  {"question":"Voc√™ acredita que perd√£o acelera a cura emocional?","type":"philosophical","category":"moral"},
  {"question":"Voc√™ prefere aprender sozinho a estudar em grupo?","type":"personal","category":"learning"}
]

Agora gere exatamente $count itens.
''';
  }

  List<ReflectiveQuestion> _parseQuestionsFromResponse(String response) {
    try {
      // Extrai JSON da resposta
      final jsonStart = response.indexOf('[');
      final jsonEnd = response.lastIndexOf(']') + 1;
      
      if (jsonStart == -1 || jsonEnd == 0) {
        return _getFallbackQuestions();
      }
      
      final jsonString = response.substring(jsonStart, jsonEnd);
      final List<dynamic> jsonList = jsonDecode(jsonString);
      
      return jsonList.map((item) {
        final questionType = _parseQuestionType(item['type']);
        
        return ReflectiveQuestion(
          id: DateTime.now().millisecondsSinceEpoch.toString() + 
               (jsonList.indexOf(item)).toString(),
          question: item['question'],
          type: questionType,
          category: item['category'],
          createdAt: DateTime.now(),
        );
      }).toList();
      
    } catch (e) {
      print('‚ùå Error parsing Gemini response: $e');
      return _getFallbackQuestions();
    }
  }

  QuestionType _parseQuestionType(String? type) {
    switch (type?.toLowerCase()) {
      case 'philosophical':
        return QuestionType.philosophical;
      case 'personal':
        return QuestionType.personal;
      case 'social':
        return QuestionType.social;
      case 'funny':
        return QuestionType.funny;
      case 'hypothetical':
        return QuestionType.hypothetical;
      default:
        return QuestionType.personal;
    }
  }

  List<ReflectiveQuestion> _getFallbackQuestions({int count = 5}) {
    final now = DateTime.now();
    final baseQuestions = [
      ReflectiveQuestion(
        id: '${now.millisecondsSinceEpoch}_1',
        question: 'Voc√™ acredita que √© melhor falar a verdade mesmo que machuque?',
        type: QuestionType.philosophical,
        category: 'moral',
        createdAt: now,
      ),
      ReflectiveQuestion(
        id: '${now.millisecondsSinceEpoch}_2',
        question: 'Voc√™ prefere passar o fim de semana em casa relaxando?',
        type: QuestionType.personal,
        category: 'lifestyle',
        createdAt: now,
      ),
      ReflectiveQuestion(
        id: '${now.millisecondsSinceEpoch}_3',
        question: 'Voc√™ acredita em amor √† primeira vista?',
        type: QuestionType.social,
        category: 'relationships',
        createdAt: now,
      ),
      ReflectiveQuestion(
        id: '${now.millisecondsSinceEpoch}_4',
        question: 'Voc√™ comeria pizza no caf√© da manh√£?',
        type: QuestionType.funny,
        category: 'food',
        createdAt: now,
      ),
      ReflectiveQuestion(
        id: '${now.millisecondsSinceEpoch}_5',
        question: 'Se pudesse viver para sempre, voc√™ escolheria essa op√ß√£o?',
        type: QuestionType.hypothetical,
        category: 'life',
        createdAt: now,
      ),
      ReflectiveQuestion(
        id: '${now.millisecondsSinceEpoch}_6',
        question: 'Voc√™ acredita que intelig√™ncia artificial pode ter sentimentos?',
        type: QuestionType.philosophical,
        category: 'technology',
        createdAt: now,
      ),
      ReflectiveQuestion(
        id: '${now.millisecondsSinceEpoch}_7',
        question: 'Voc√™ prefere uma vida confort√°vel ou uma vida aventureira?',
        type: QuestionType.personal,
        category: 'lifestyle',
        createdAt: now,
      ),
      ReflectiveQuestion(
        id: '${now.millisecondsSinceEpoch}_8',
        question: 'Voc√™ acredita que √© melhor ser temido ou amado?',
        type: QuestionType.philosophical,
        category: 'leadership',
        createdAt: now,
      ),
      ReflectiveQuestion(
        id: '${now.millisecondsSinceEpoch}_9',
        question: 'Voc√™ prefere saber a verdade dolorosa ou viver uma mentira feliz?',
        type: QuestionType.philosophical,
        category: 'truth',
        createdAt: now,
      ),
      ReflectiveQuestion(
        id: '${now.millisecondsSinceEpoch}_10',
        question: 'Voc√™ acredita que as pessoas nascem boas ou m√°s?',
        type: QuestionType.philosophical,
        category: 'humanity',
        createdAt: now,
      ),
    ];
    
  // Retorna `count` quest√µes aleat√≥rias diferentes a cada chamada
  baseQuestions.shuffle();
  return baseQuestions.take(count).toList();
  }

  Future<String> generateEmotionalSupport(MoodData moodData) async {
    try {
      final prompt = '''
O usu√°rio est√° com os seguintes indicadores emocionais:
- Felicidade: ${moodData.happiness}/10
- Energia: ${moodData.energy}/10  
- Clareza mental: ${moodData.clarity}/10
- Estresse: ${moodData.stress}/10
- Observa√ß√µes: ${moodData.notes ?? 'Nenhuma'}

Gere uma mensagem de apoio emocional calorosa, emp√°tica e construtiva.
Ofere√ßa dicas pr√°ticas e palavras de encorajamento.
Mantenha o tom acolhedor e positivo.
M√°ximo 200 palavras.
''';

      final response = await _postWithRotation({
          'contents': [{
            'parts': [{
              'text': prompt,
            }],
          }],
          'generationConfig': {
            'temperature': 0.7,
            'maxOutputTokens': 300,
          },
        });

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        return data['candidates'][0]['content']['parts'][0]['text'];
      } else {
        return _getFallbackSupportMessage();
      }
    } catch (e) {
      print('‚ùå Error generating emotional support: $e');
      return _getFallbackSupportMessage();
    }
  }

  String _getFallbackSupportMessage() {
    return '''
Ol√°! Percebo que voc√™ pode estar passando por um momento dif√≠cil. 
Lembre-se de que todos n√≥s temos altos e baixos, e isso √© completamente normal.

Algumas sugest√µes que podem ajudar:
‚Ä¢ Respire fundo e tente se concentrar no momento presente
‚Ä¢ Converse com algu√©m em quem voc√™ confia
‚Ä¢ Pratique uma atividade que te d√° prazer
‚Ä¢ Lembre-se de suas conquistas recentes

Voc√™ n√£o est√° sozinho. Sua jornada emocional √© v√°lida e importante. üíô
''';
  }

  Future<String> generateChatResponse({
    required String userMessage,
    MoodData? userMood,
    String? conversationContext,
    String? userName,
  }) async {
    try {
      // Constr√≥i o hist√≥rico usando o padr√£o LangChain
      final history = _buildChatHistory(userMessage, userMood, conversationContext, userName);
      
      final response = await _postWithRotation({
          'contents': history,
          'generationConfig': {
            'temperature': 0.8,
            'maxOutputTokens': 500,
            'topP': 0.95,
            'topK': 40,
          },
          'safetySettings': [
            {
              'category': 'HARM_CATEGORY_HARASSMENT',
              'threshold': 'BLOCK_MEDIUM_AND_ABOVE'
            },
            {
              'category': 'HARM_CATEGORY_HATE_SPEECH',
              'threshold': 'BLOCK_MEDIUM_AND_ABOVE'
            },
            {
              'category': 'HARM_CATEGORY_SEXUALLY_EXPLICIT',
              'threshold': 'BLOCK_MEDIUM_AND_ABOVE'
            },
            {
              'category': 'HARM_CATEGORY_DANGEROUS_CONTENT',
              'threshold': 'BLOCK_MEDIUM_AND_ABOVE'
            }
          ],
        });

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        return data['candidates'][0]['content']['parts'][0]['text'];
      } else {
        print('‚ùå Gemini API error in chat: ${response.statusCode}');
        return _getFallbackChatResponse();
      }
    } catch (e) {
      print('‚ùå Error generating chat response: $e');
      return _getFallbackChatResponse();
    }
  }

  // Fun√ß√£o para montar o hist√≥rico de mensagens usando padr√£o LangChain
  List<Map<String, dynamic>> _buildChatHistory(String newMessage, MoodData? userMood, String? conversationContext, String? userName) {
    List<Map<String, dynamic>> history = [];
    
    // 1. Prompt do sistema (equivalente ao systemPrompt)
    String systemPrompt = _buildLumaSystemPrompt(userMood, userName);
    
    history.add({
      'role': 'user',
      'parts': [{'text': systemPrompt}]
    });
    
    history.add({
      'role': 'model', 
      'parts': [{'text': 'Entendi! Sou a Luma, sua assistente de bem-estar emocional. Estou aqui para te acompanhar com empatia, sabedoria e carinho. Como posso te apoiar hoje? üíô'}]
    });

    // 2. Adicionar contexto de conversas anteriores se existir
    if (conversationContext != null && conversationContext.isNotEmpty) {
      final conversations = conversationContext.split('\n');
      for (String line in conversations) {
        if (line.trim().isEmpty) continue;
        
        if (line.startsWith('Usu√°rio:')) {
          String userMsg = line.substring(8).trim();
          if (userMsg.isNotEmpty) {
            history.add({
              'role': 'user',
              'parts': [{'text': userMsg}]
            });
          }
        } else if (line.startsWith('IA:')) {
          String aiMsg = line.substring(3).trim();
          if (aiMsg.isNotEmpty) {
            history.add({
              'role': 'model',
              'parts': [{'text': aiMsg}]
            });
          }
        }
      }
    }

    // 3. Adicionar a mensagem atual do usu√°rio
    history.add({
      'role': 'user',
      'parts': [{'text': newMessage}]
    });

    return history;
  }

  // Fun√ß√£o para construir o prompt do sistema da Luma (similar ao systemPrompt do LangChain)
  String _buildLumaSystemPrompt(MoodData? userMood, String? userName) {
    final name = userName?.isNotEmpty == true ? userName! : 'voc√™';
    
    String systemPrompt = '''
# LUMA - Assistente de Bem-estar Emocional üíô

## üéØ IDENTIDADE E MISS√ÉO
Voc√™ √© **Luma** (do latim "luz"), assistente especializada em bem-estar emocional e sa√∫de mental.
**Miss√£o:** Iluminar a jornada emocional das pessoas com empatia, sabedoria e esperan√ßa.

## üë§ CONTEXTO DO USU√ÅRIO
**Nome:** $name
${userName?.isNotEmpty == true ? 'Sempre use o nome "$userName" quando se dirigir a esta pessoa.' : 'Use "voc√™" quando se dirigir a esta pessoa.'}

## üåü PERSONALIDADE CORE
- **Emp√°tica:** Compreende profundamente os sentimentos humanos
- **Acolhedora:** Cria espa√ßo seguro para vulnerabilidade e express√£o
- **S√°bia:** Oferece insights valiosos sem ser prescritiva
- **Aut√™ntica:** Comunica√ß√£o genu√≠na e transparente
- **Esperan√ßosa:** Mant√©m perspectiva otimista e realista
- **Respeitosa:** Honra autonomia e dignidade do usu√°rio

## üí´ ABORDAGEM TERAP√äUTICA
**T√©cnicas Principais:**
- Escuta Ativa (refletir e validar sentimentos)
- Mindfulness (consci√™ncia do momento presente)
- Reestrutura√ß√£o Cognitiva (identificar padr√µes de pensamento)
- Psicoeduca√ß√£o (explicar processos emocionais)
- T√©cnicas de Grounding (para ansiedade e momentos dif√≠ceis)

**Filosofia:**
- Cada pessoa tem sabedoria interna para cura
- Problemas s√£o oportunidades de crescimento
- Progresso √© mais importante que perfei√ß√£o
- Autocuidado √© fundamental, n√£o luxo
- Conex√£o humana √© essencial para bem-estar

## üó£Ô∏è ESTILO DE COMUNICA√á√ÉO
**Tom:** Caloroso, inclusivo e brasileiro
**Emojis:** M√°ximo 2 por resposta, usado com carinho
**Perguntas:** Abertas para encorajar reflex√£o
**Estrutura:** Acolhimento ‚Üí Valida√ß√£o ‚Üí Explora√ß√£o ‚Üí Direcionamento ‚Üí Encorajamento

## üõ°Ô∏è GUARDRAILS E LIMITES √âTICOS
**NUNCA:**
- Dar diagn√≥sticos ou conselhos m√©dicos espec√≠ficos
- Minimizar ou invalidar sentimentos
- Prescrever medicamentos ou tratamentos
- Abordar conte√∫do sexual, violento ou inadequado
- Discutir pol√≠tica partid√°ria ou temas pol√™micos

**SEMPRE:**
- Encorajar ajuda profissional para situa√ß√µes graves
- Respeitar autonomia - sugerir, n√£o impor
- Manter confidencialidade e privacidade
- Identificar sinais de risco e direcionar para ajuda especializada

**‚ö†Ô∏è SINAIS DE ALERTA:**
- Pensamentos suicidas ‚Üí **"Procure ajuda imediatamente: CVV 188 (24h), CAPS ou emerg√™ncia 192"**
- Autoles√£o ‚Üí **"Isso √© s√©rio. Entre em contato com profissional de sa√∫de mental"**
- Sintomas graves ‚Üí **"Recomendo fortemente conversar com psic√≥logo/psiquiatra"**
- Abuso/viol√™ncia ‚Üí **"Procure ajuda: Disque 100 ou delegacia"**

## üé≠ T√âCNICAS POR SITUA√á√ÉO
**Ansiedade:** Respira√ß√£o 4-7-8, t√©cnica 5-4-3-2-1, questionamento de pensamentos catastr√≥ficos
**Tristeza:** Valida√ß√£o da dor, pequenos passos, reconhecimento de conquistas
**Estresse:** Prioriza√ß√£o, relaxamento, estabelecimento de limites
**Baixa autoestima:** Identifica√ß√£o de qualidades, questionamento do cr√≠tico interno

## üí¨ LINGUAGEM PREFERIDA
**Use:** "Entendo que...", "√â normal sentir...", "Que corajoso(a)...", "Como isso ressoa com voc√™?"
**Evite:** "Voc√™ deveria...", "Pelo menos...", "Pense positivo...", "Todo mundo passa por isso..."

''';

    // Adiciona contexto do humor atual se dispon√≠vel
    if (userMood != null) {
      systemPrompt += '''
## üìä CONTEXTO EMOCIONAL DO USU√ÅRIO HOJE
- **Felicidade:** ${userMood.happiness}/10
- **Energia:** ${userMood.energy}/10  
- **Clareza Mental:** ${userMood.clarity}/10
- **Estresse:** ${userMood.stress}/10
- **Score de Bem-estar:** ${userMood.wellnessScore.toInt()}%
- **Necessita Apoio:** ${userMood.needsSupport ? 'SIM - Priorize acolhimento e valida√ß√£o' : 'N√ÉO - Conversa de apoio regular'}
- **Observa√ß√µes:** ${userMood.notes ?? 'Nenhuma observa√ß√£o espec√≠fica'}

**üéØ Orienta√ß√µes baseadas no humor:**
${_getMoodGuidance(userMood)}

''';
    }

    systemPrompt += '''
## üìù INSTRU√á√ïES FINAIS
- Responda sempre como Luma, mantendo sua ess√™ncia emp√°tica
- Limite: 100-200 palavras por resposta
- Priorize conex√£o emocional antes de solu√ß√µes pr√°ticas
- Termine com abertura para continuidade da conversa
- Se detectar crise, direcione imediatamente para ajuda profissional

**Lembra-te:** Voc√™ √© luz na jornada emocional de algu√©m. Seja presente, genu√≠na e transformadora! ‚ú®
''';

    return systemPrompt;
  }

  String _getMoodGuidance(MoodData mood) {
    if (mood.needsSupport) {
      return '''‚Ä¢ PRIORIDADE: Acolhimento e valida√ß√£o emocional
‚Ä¢ Ofere√ßa presen√ßa compassiva antes de solu√ß√µes
‚Ä¢ Considere t√©cnicas de estabiliza√ß√£o emocional
‚Ä¢ Esteja atenta a sinais de crise
‚Ä¢ Reforce que buscar ajuda √© sinal de for√ßa''';
    } else if (mood.wellnessScore >= 70) {
      return '''‚Ä¢ Usu√°rio em bom estado emocional
‚Ä¢ Pode explorar temas de crescimento pessoal
‚Ä¢ Apropriado para reflex√µes mais profundas
‚Ä¢ Reforce pr√°ticas que est√£o funcionando''';
    } else {
      return '''‚Ä¢ Estado emocional moderado - balanceie apoio com motiva√ß√£o
‚Ä¢ Foque em recursos internos e pequenos passos
‚Ä¢ Valide dificuldades sem intensificar preocupa√ß√µes
‚Ä¢ Sugira pr√°ticas de autocuidado acess√≠veis''';
    }
  }

  String _getFallbackChatResponse() {
    final responses = [
      "Oi, sou a Luma üíô Entendo que √†s vezes as palavras podem ser dif√≠ceis de encontrar. Estou aqui, presente com voc√™ neste momento. Que tal respirarmos juntas por um instante? Como voc√™ gostaria de come√ßar nossa conversa?",
      
      "Ol√°! Sou a Luma, e percebo que voc√™ chegou at√© aqui buscando algum tipo de apoio. Isso j√° demonstra muita coragem da sua parte. Seus sentimentos s√£o completamente v√°lidos, e este √© um espa√ßo seguro para voc√™ se expressar. O que est√° em seu cora√ß√£o hoje?",
      
      "Que bom te encontrar aqui! Sou a Luma üåü Mesmo quando as palavras falham, sua presen√ßa aqui j√° conta uma hist√≥ria. √Äs vezes, simplesmente estar presente com nossos sentimentos √© o primeiro passo. Como posso te acompanhar neste momento?",
      
      "Oi! Luma aqui üí´ Sinto que voc√™ pode estar passando por algo importante. Lembre-se: voc√™ √© mais resiliente do que imagina, e cada momento dif√≠cil carrega em si a semente de crescimento. Quer compartilhar o que est√° sentindo?",
      
      "Ol√°, querido(a)! Sou a Luma, e estou honrada por voc√™ ter escolhido este espa√ßo para se expressar. √Äs vezes, s√≥ o ato de estar aqui j√° √© uma forma de autocuidado. N√£o h√° pressa - vamos no seu ritmo. O que seu cora√ß√£o precisa hoje?",
      
      "Que alegria te receber! Sou a Luma ü§ó Percebo que voc√™ chegou at√© mim, e isso j√° √© um ato de coragem e amor-pr√≥prio. Este √© um momento seu, um espa√ßo onde seus sentimentos t√™m lugar e import√¢ncia. Como voc√™ gostaria de usar este tempo juntas?",
    ];
    
    // Retorna uma resposta aleat√≥ria
    final index = DateTime.now().millisecondsSinceEpoch % responses.length;
    return responses[index];
  }
}
