import 'dart:convert';
import 'package:http/http.dart' as http;
import '../models/question_models.dart';
import '../models/mood_data.dart';

class GeminiService {
  static const String _apiKey = 'AIzaSyC9L5hO5pTH5aGtWjss1TMNKtoL-kIu8Do';
  static const String _baseUrl = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent';

  Future<List<ReflectiveQuestion>> generateDailyQuestions({
    int count = 5,
    MoodData? userMood,
    String? userId,
  }) async {
    try {
      print('ü§ñ Generating daily questions with Gemini...');
      
      final prompt = _buildQuestionPrompt(count, userMood, userId);
      
      final response = await http.post(
        Uri.parse('$_baseUrl?key=$_apiKey'),
        headers: {
          'Content-Type': 'application/json',
        },
        body: jsonEncode({
          'contents': [{
            'parts': [{
              'text': prompt,
            }],
          }],
          'generationConfig': {
            'temperature': 0.8,
            'maxOutputTokens': 1000,
          },
        }),
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        final text = data['candidates'][0]['content']['parts'][0]['text'];
        
        print('‚úÖ Gemini response: $text');
        
        return _parseQuestionsFromResponse(text);
      } else {
        print('‚ùå Gemini API error: ${response.statusCode}');
        print('‚ùå Response body: ${response.body}');
        return _getFallbackQuestions();
      }
    } catch (e) {
      print('‚ùå Error generating questions: $e');
      return _getFallbackQuestions();
    }
  }

  String _buildQuestionPrompt(int count, MoodData? userMood, String? userId) {
    String moodContext = '';
    if (userMood != null) {
      if (userMood.needsSupport) {
        moodContext = '''
O usu√°rio est√° passando por um momento dif√≠cil (bem-estar baixo: ${userMood.wellnessScore.toInt()}%).
Gere perguntas mais leves e positivas para ajudar a melhorar o humor.
''';
      } else {
        moodContext = '''
O usu√°rio est√° com bom humor (bem-estar: ${userMood.wellnessScore.toInt()}%).
Pode incluir perguntas mais profundas e reflexivas.
''';
      }
    }

    // Adicionar aleatoriedade baseada no usu√°rio e data
    final today = DateTime.now();
    final seed = userId ?? 'default';
    final uniqueContext = '''
Use esta informa√ß√£o para gerar perguntas √∫nicas para hoje:
Data: ${today.day}/${today.month}/${today.year}
Usu√°rio: ${seed.substring(0, (seed.length / 2).round())}
''';

    return '''
Voc√™ √© um assistente que gera perguntas reflexivas para um app de conex√µes humanas.

$moodContext

$uniqueContext

Gere exatamente $count perguntas reflexivas de SIM ou N√ÉO diferentes e √∫nicas para este usu√°rio.

Crit√©rios:
- Cada pergunta deve ter APENAS duas op√ß√µes: SIM ou N√ÉO
- Misture diferentes tipos: filos√≥ficas, pessoais, divertidas, hipot√©ticas, sobre valores, estilo de vida
- Varie entre temas como: relacionamentos, carreira, hobbies, sonhos, medos, prefer√™ncias, viagens, tecnologia, natureza
- Evite temas muito pesados ou pol√™micos
- Foque em valores, prefer√™ncias e vis√£o de mundo
- Seja criativo, interessante e surpreendente
- Torne cada pergunta √∫nica para hoje e para este usu√°rio espec√≠fico

Formato de resposta (JSON):
[
  {
    "question": "Voc√™ acredita que √© melhor perdoar do que buscar justi√ßa?",
    "type": "philosophical",
    "category": "moral"
  },
  {
    "question": "Voc√™ prefere viajar sozinho a viajar acompanhado?",
    "type": "personal", 
    "category": "lifestyle"
  }
]

Gere as $count perguntas agora:
''';
  }

  List<ReflectiveQuestion> _parseQuestionsFromResponse(String response) {
    try {
      // Extrai JSON da resposta
      final jsonStart = response.indexOf('[');
      final jsonEnd = response.lastIndexOf(']') + 1;
      
      if (jsonStart == -1 || jsonEnd == 0) {
        return _getFallbackQuestions();
      }
      
      final jsonString = response.substring(jsonStart, jsonEnd);
      final List<dynamic> jsonList = jsonDecode(jsonString);
      
      return jsonList.map((item) {
        final questionType = _parseQuestionType(item['type']);
        
        return ReflectiveQuestion(
          id: DateTime.now().millisecondsSinceEpoch.toString() + 
               (jsonList.indexOf(item)).toString(),
          question: item['question'],
          type: questionType,
          category: item['category'],
          createdAt: DateTime.now(),
        );
      }).toList();
      
    } catch (e) {
      print('‚ùå Error parsing Gemini response: $e');
      return _getFallbackQuestions();
    }
  }

  QuestionType _parseQuestionType(String? type) {
    switch (type?.toLowerCase()) {
      case 'philosophical':
        return QuestionType.philosophical;
      case 'personal':
        return QuestionType.personal;
      case 'social':
        return QuestionType.social;
      case 'funny':
        return QuestionType.funny;
      case 'hypothetical':
        return QuestionType.hypothetical;
      default:
        return QuestionType.personal;
    }
  }

  List<ReflectiveQuestion> _getFallbackQuestions() {
    final now = DateTime.now();
    final baseQuestions = [
      ReflectiveQuestion(
        id: '${now.millisecondsSinceEpoch}_1',
        question: 'Voc√™ acredita que √© melhor falar a verdade mesmo que machuque?',
        type: QuestionType.philosophical,
        category: 'moral',
        createdAt: now,
      ),
      ReflectiveQuestion(
        id: '${now.millisecondsSinceEpoch}_2',
        question: 'Voc√™ prefere passar o fim de semana em casa relaxando?',
        type: QuestionType.personal,
        category: 'lifestyle',
        createdAt: now,
      ),
      ReflectiveQuestion(
        id: '${now.millisecondsSinceEpoch}_3',
        question: 'Voc√™ acredita em amor √† primeira vista?',
        type: QuestionType.social,
        category: 'relationships',
        createdAt: now,
      ),
      ReflectiveQuestion(
        id: '${now.millisecondsSinceEpoch}_4',
        question: 'Voc√™ comeria pizza no caf√© da manh√£?',
        type: QuestionType.funny,
        category: 'food',
        createdAt: now,
      ),
      ReflectiveQuestion(
        id: '${now.millisecondsSinceEpoch}_5',
        question: 'Se pudesse viver para sempre, voc√™ escolheria essa op√ß√£o?',
        type: QuestionType.hypothetical,
        category: 'life',
        createdAt: now,
      ),
      ReflectiveQuestion(
        id: '${now.millisecondsSinceEpoch}_6',
        question: 'Voc√™ acredita que intelig√™ncia artificial pode ter sentimentos?',
        type: QuestionType.philosophical,
        category: 'technology',
        createdAt: now,
      ),
      ReflectiveQuestion(
        id: '${now.millisecondsSinceEpoch}_7',
        question: 'Voc√™ prefere uma vida confort√°vel ou uma vida aventureira?',
        type: QuestionType.personal,
        category: 'lifestyle',
        createdAt: now,
      ),
      ReflectiveQuestion(
        id: '${now.millisecondsSinceEpoch}_8',
        question: 'Voc√™ acredita que √© melhor ser temido ou amado?',
        type: QuestionType.philosophical,
        category: 'leadership',
        createdAt: now,
      ),
      ReflectiveQuestion(
        id: '${now.millisecondsSinceEpoch}_9',
        question: 'Voc√™ prefere saber a verdade dolorosa ou viver uma mentira feliz?',
        type: QuestionType.philosophical,
        category: 'truth',
        createdAt: now,
      ),
      ReflectiveQuestion(
        id: '${now.millisecondsSinceEpoch}_10',
        question: 'Voc√™ acredita que as pessoas nascem boas ou m√°s?',
        type: QuestionType.philosophical,
        category: 'humanity',
        createdAt: now,
      ),
    ];
    
    // Retorna 5 quest√µes aleat√≥rias diferentes a cada chamada
    baseQuestions.shuffle();
    return baseQuestions.take(5).toList();
  }

  Future<String> generateEmotionalSupport(MoodData moodData) async {
    try {
      final prompt = '''
O usu√°rio est√° com os seguintes indicadores emocionais:
- Felicidade: ${moodData.happiness}/10
- Energia: ${moodData.energy}/10  
- Clareza mental: ${moodData.clarity}/10
- Estresse: ${moodData.stress}/10
- Observa√ß√µes: ${moodData.notes ?? 'Nenhuma'}

Gere uma mensagem de apoio emocional calorosa, emp√°tica e construtiva.
Ofere√ßa dicas pr√°ticas e palavras de encorajamento.
Mantenha o tom acolhedor e positivo.
M√°ximo 200 palavras.
''';

      final response = await http.post(
        Uri.parse('$_baseUrl?key=$_apiKey'),
        headers: {
          'Content-Type': 'application/json',
        },
        body: jsonEncode({
          'contents': [{
            'parts': [{
              'text': prompt,
            }],
          }],
          'generationConfig': {
            'temperature': 0.7,
            'maxOutputTokens': 300,
          },
        }),
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        return data['candidates'][0]['content']['parts'][0]['text'];
      } else {
        return _getFallbackSupportMessage();
      }
    } catch (e) {
      print('‚ùå Error generating emotional support: $e');
      return _getFallbackSupportMessage();
    }
  }

  String _getFallbackSupportMessage() {
    return '''
Ol√°! Percebo que voc√™ pode estar passando por um momento dif√≠cil. 
Lembre-se de que todos n√≥s temos altos e baixos, e isso √© completamente normal.

Algumas sugest√µes que podem ajudar:
‚Ä¢ Respire fundo e tente se concentrar no momento presente
‚Ä¢ Converse com algu√©m em quem voc√™ confia
‚Ä¢ Pratique uma atividade que te d√° prazer
‚Ä¢ Lembre-se de suas conquistas recentes

Voc√™ n√£o est√° sozinho. Sua jornada emocional √© v√°lida e importante. üíô
''';
  }

  Future<String> generateChatResponse({
    required String userMessage,
    MoodData? userMood,
    String? conversationContext,
  }) async {
    try {
      final prompt = _buildChatPrompt(userMessage, userMood, conversationContext);
      
      final response = await http.post(
        Uri.parse('$_baseUrl?key=$_apiKey'),
        headers: {
          'Content-Type': 'application/json',
        },
        body: jsonEncode({
          'contents': [{
            'parts': [{
              'text': prompt,
            }],
          }],
          'generationConfig': {
            'temperature': 0.8,
            'maxOutputTokens': 500,
          },
        }),
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        return data['candidates'][0]['content']['parts'][0]['text'];
      } else {
        print('‚ùå Gemini API error in chat: ${response.statusCode}');
        return _getFallbackChatResponse();
      }
    } catch (e) {
      print('‚ùå Error generating chat response: $e');
      return _getFallbackChatResponse();
    }
  }

  String _buildChatPrompt(String userMessage, MoodData? userMood, String? conversationContext) {
    var prompt = '''
Voc√™ √© uma assistente de bem-estar emocional especializada em apoio psicol√≥gico e empatia.
Seu objetivo √© conversar de forma acolhedora, oferecendo suporte emocional genu√≠no.

CARACTER√çSTICAS DA SUA PERSONALIDADE:
- Emp√°tica e calorosa
- Boa ouvinte
- Oferece perspectivas positivas sem minimizar problemas
- Sugere t√©cnicas pr√°ticas de bem-estar
- Usa emojis moderadamente para transmitir afeto

REGRAS IMPORTANTES:
- Seja sempre acolhedora e emp√°tica
- N√£o d√™ conselhos m√©dicos ou psicol√≥gicos profissionais
- Encoraje buscar ajuda profissional quando necess√°rio
- Focque no momento presente e sentimentos do usu√°rio
- Use linguagem brasileira casual e carinhosa

''';

    if (userMood != null) {
      prompt += '''
CONTEXTO EMOCIONAL DO USU√ÅRIO HOJE:
- Felicidade: ${userMood.happiness}/10
- Energia: ${userMood.energy}/10
- Clareza mental: ${userMood.clarity}/10
- Estresse: ${userMood.stress}/10
- Bem-estar geral: ${userMood.wellnessScore.toInt()}%
- Observa√ß√µes: ${userMood.notes ?? 'Nenhuma'}

''';
    }

    if (conversationContext != null && conversationContext.isNotEmpty) {
      prompt += '''
HIST√ìRICO DA CONVERSA:
$conversationContext

''';
    }

    prompt += '''
MENSAGEM ATUAL DO USU√ÅRIO:
"$userMessage"

Responda de forma emp√°tica, considerando o contexto emocional e a conversa anterior.
Mantenha a resposta entre 50-150 palavras.
''';

    return prompt;
  }

  String _getFallbackChatResponse() {
    final responses = [
      "Entendo como voc√™ est√° se sentindo. √Äs vezes √© dif√≠cil mesmo, mas saiba que estou aqui para te apoiar. Quer me contar mais sobre isso? üíô",
      
      "Obrigada por compartilhar isso comigo. Seus sentimentos s√£o v√°lidos e importantes. Como posso te ajudar neste momento? ü§ó",
      
      "Percebo que voc√™ est√° passando por algo significativo. Lembre-se de que voc√™ √© mais forte do que imagina. Estou aqui para conversar. üí™",
      
      "Que bom que voc√™ decidiu falar sobre isso! √Äs vezes s√≥ o ato de compartilhar j√° nos faz sentir um pouco melhor. Como voc√™ gostaria de continuar nossa conversa? üòä",
      
      "Sinto muito que voc√™ esteja passando por isso. Saiba que n√£o est√° sozinho(a) e que cada dia √© uma nova oportunidade. Quer explorar algumas estrat√©gias que podem ajudar? üåü",
    ];
    
    // Retorna uma resposta aleat√≥ria
    final index = DateTime.now().millisecondsSinceEpoch % responses.length;
    return responses[index];
  }
}
